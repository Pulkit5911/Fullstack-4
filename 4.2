// 1. Import Express
const express = require('express');

// 2. Create an Express application
const app = express();
const port = 3000;

// 3. Middleware to parse JSON request bodies
// This is crucial for handling the POST request body
app.use(express.json());

// 4. In-memory data store (as a simple array)
// We'll pre-populate it with the data seen in your first screenshot.
let cards = [
  { id: 1, suit: "Hearts", value: "Ace" },
  { id: 2, suit: "Spades", value: "King" },
  { id: 3, suit: "Diamonds", value: "Queen" }
];

// A simple counter to generate unique IDs for new cards
let nextId = 4;

// --- API Endpoints ---

// GET /cards - List all cards in the collection
app.get('/cards', (req, res) => {
  // Respond with the full array of cards and a 200 OK status
  res.status(200).json(cards);
});

// GET /cards/:id - Retrieve a specific card by its ID
app.get('/cards/:id', (req, res) => {
  // Find the card with the matching ID. req.params.id is a string, so we parse it to an integer.
  const cardId = parseInt(req.params.id);
  const card = cards.find(c => c.id === cardId);

  if (card) {
    // If the card is found, respond with the card object and a 200 OK status
    res.status(200).json(card);
  } else {
    // If no card is found, respond with a 404 Not Found status and an error message
    res.status(404).json({ message: 'Card not found' });
  }
});

// POST /cards - Add a new card to the collection
app.post('/cards', (req, res) => {
  // Destructure the suit and value from the request body
  const { suit, value } = req.body;

  // Basic validation: ensure suit and value are provided
  if (!suit || !value) {
    return res.status(400).json({ message: 'Suit and value are required' });
  }

  // Create the new card object with a unique ID
  const newCard = {
    id: nextId++, // Use the current nextId, then increment it for the next card
    suit: suit,
    value: value
  };

  // Add the new card to our in-memory array
  cards.push(newCard);

  // Respond with the newly created card and a 201 Created status
  res.status(201).json(newCard);
});

// DELETE /cards/:id - Delete a card by its ID
app.delete('/cards/:id', (req, res) => {
  const cardId = parseInt(req.params.id);
  // Find the index of the card to be removed
  const cardIndex = cards.findIndex(c => c.id === cardId);

  if (cardIndex !== -1) {
    // Use splice to remove the card from the array. It returns an array of removed items.
    const deletedCard = cards.splice(cardIndex, 1)[0];
    
    // Respond with a success message and the card that was deleted, as per the screenshot
    res.status(200).json({
      message: `Card with ID ${cardId} removed`,
      card: deletedCard
    });
  } else {
    // If the card to be deleted is not found, respond with a 404 status
    res.status(404).json({ message: 'Card not found' });
  }
});


// 5. Start the server and listen on the specified port
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
